name: test g
on:
#  workflow_dispatch:
  push:

jobs:
    modif-image:
      runs-on: self-hosted
      steps:
      - name: docker version
        run: docker --version

      - uses: actions/checkout@v4

      - name: compare les image compose
        run: |
          $tagcompose = docker compose -f ./compose/docker-compose-monitoring.yml config --quiet --images | findstr grafana
          echo "Derniere image tag compose : $tagcompose"

      - name: compare les tag des image dans dockerhub
        run: |
          $latestTag = (Invoke-RestMethod -Uri "https://registry.hub.docker.com/v2/repositories/grafana/grafana/tags/").results[5].name
          echo "Derniere image tag dockerhub : grafana/grafana:$latestTag"

      - name : var
        run: |
          $path = ".\compose\docker-compose-monitoring-get.yml"
          $path2 = "C:\Users\mbenj\Desktop\devops\github action\test github action\github-action-test\compose\docker-compose-monitoring-dotnet.yml"

      - name: docker-compose methode 1 
        run: |
          $path = "./compose/docker-compose-monitoring-get.yml"
          $tagcompose = docker compose -f ./compose/docker-compose-monitoring-get.yml config --quiet --images | findstr grafana
          $latestTag = (Invoke-RestMethod -Uri "https://registry.hub.docker.com/v2/repositories/grafana/grafana/tags/").results[5].name
          echo "Derniere image tag compose : $tagcompose"
          echo "Derniere image tag dockerhub : grafana/grafana:$latestTag"
          echo "le path est $path"
          ls ./compose/docker-compose-monitoring-get.yml
          $modif = (Get-Content $path) -replace "$tagcompose","grafana/grafana:$latestTag" -replace "prom/prometheus:v2.48.0","prom/prometheus:v2.48.0" -replace "cadvisor:v0.47.2","cadvisor:v0.47.2"
          echo $modif
          echo 'debut modif image'
          ((Get-Content -Path "./compose/docker-compose-monitoring-get.yml") -replace "$tagcompose", "grafana/grafana:$latestTag") | Set-Content -Path ./compose/docker-compose-monitoring-get.yml
          echo 'fin1 modif image'
          echo 'debut modif image2'
          $modif2 = (Get-Content -Path "$path") -replace "$tagcompose","grafana/grafana:$latestTag" -replace "prom/prometheus:v2.48.0","prom/prometheus:v2.48.0" -replace "cadvisor:v0.47.2","cadvisor:v0.47.2" | Set-Content -Path "$path"
          $modif2 | Set-Content $path
          cat ./compose/docker-compose-monitoring-get.yml

      - name: docker-compose up
        run: |
          $path2 = "C:\Users\mbenj\Desktop\devops\github action\test github action\github-action-test\compose\docker-compose-monitoring-dotnet.yml"
          $tagcompose_grafana = docker compose -f ./compose/docker-compose-monitoring.yml config --quiet --images | findstr grafana
          $tagcompose_prometheus = docker compose -f ./compose/docker-compose-monitoring.yml config --quiet --images | findstr prometheus
          $tagcompose_cadvisor = docker compose -f ./compose/docker-compose-monitoring.yml config --quiet --images | findstr cadvisor
          $latestTag = (Invoke-RestMethod -Uri "https://registry.hub.docker.com/v2/repositories/grafana/grafana/tags/").results[5].name
          $latestTag_prometheus = (Invoke-RestMethod -Uri "https://registry.hub.docker.com/v2/repositories/prom/prometheus/tags/").results[5].name
          $latestTag_cadvisor = (Invoke-RestMethod -Uri "https://gcr.io/v2/cadvisor/cadvisor/tags/list").tags[39]
          [System.IO.File]::WriteAllText($path2, ([System.IO.File]::ReadAllText($path2) -replace "$tagcompose_grafana", "grafana/grafana:$latestTag" -replace "$tagcompose_prometheus", "prom/prometheus:$latestTag_prometheus" -replace "$tagcompose_cadvisor", "cadvisor:$latestTag_cadvisor"))

    helm:
      runs-on: self-hosted
      if: github.event_name == 'workflow_dispatch'    
      steps:
      - name: install helm
        run: |
          docker run -d --name helm10 alpine sh -c "apk add --no-cache helm"

      - name: install en 'liste avec plusieur ligne' helm et kubectl et echo
        run: |
          docker run -d --name helm10 alpine sh -c "
            apk add --no-cache helm &&
            apk add --no-cache kubectl &&
            echo installation de helm et kubectl terminé"

      - name: install en 'liste avec plusieur ligne' helm et kubectl et echo dans le conteneur helm10
        run: |
          docker exec helm10 sh -c "
            apk add --no-cache helm &&
            apk add --no-cache kubectl &&
            echo installation de helm et kubectl terminé"

      - name: install en 'liste avec plusieur ligne' le volume et nom du nouveau conteneur helm11 sans rien d'autre
        run: |
          docker run -d --name helm11 -v /test:/test alpine sh -c "sleep infinity"

      - name: install en 'liste avec plusieur ligne' le volume et nom du nouveau conteneur helm12 sans rien d'autre
        run: |
          docker run -d --name helm12 -v /test:/test alpine sh -c "echo 'sleep infinity'"

    helm2:
      runs-on: self-hosted
      if: github.event_name == 'workflow_dispatch'
      steps:
      - name: install helm
        run: |
          echo "debut install helm"
          echo " install container helm20 qui telecharge helm"
          docker run -d --name helm20 alpine sh -c "wget https://get.helm.sh/helm-v3.16.3-linux-amd64.tar.gz \
          && echo 'decompression du fichier' \
          && tar -zxvf helm-v3.16.3-linux-amd64.tar.gz \
          && echo 'deplacement du fichier' \
          && mv linux-amd64/helm /usr/local/bin/helm \
          && echo 'suppression du fichier compresser' \
          && rm -rf linux-amd64 helm-v3.16.3-linux-amd64.tar.gz"
          echo "Container helm20 avec helm installé."

    test-docker-self-hosted:
      runs-on: self-hosted, windows-latest
      if: github.event_name == 'workflow_dispatch'
      steps:
      - name: test docker
        run: docker -v
      - name: test docker commande run avec alpine avec plusieur commande1
        run: |
          docker run -d --name test-docker alpine sh -c "sleep infinity"
        # realiser l'etape dans le repertoire du conteneur depuis lhote
#        working-directory: /var/lib/docker/overlay2/7b4e

#      - name: test docker
#        run: |
#          docker run -d --name test-docker alpine sh -c "sleep infinity" -v /test:c:/test

#      - name: test docker commande exec
#        run: |
#          docker exec test-docker sh -c "echo 'Running in Alpine container'"
#        working-directory: c:/test
        
      - name: test docker commande run avec alpine avec plusieur commande
        run: |
          docker exec test-docker sh -c "
            echo Running in Alpine container &&
            apk update &&
            apk add kubectl &&
            kubectl version --client &&
            sleep 10 &&
            apk add --no-cache curl &&
            echo curl"
    
    test-docker:
      runs-on: ubuntu-latest
      if: github.event_name == 'workflow_dispatch'
      steps:
      - name: test docker
        run: docker -v
      - name: test docker commande run avec alpine avec plusieur commande1
        run: |
          docker run -i --name test-docker alpine /bin/sh -c "
            echo 'Running in Alpine container' &&
            apk update &&
            apk add kubectl &&
            kubectl version --client"
        
      - name: test docker commande run avec alpine avec plusieur commande
        run: >
          docker exec test-docker /bin/sh -c "
            echo curl &&
            ls -alh && 
            ls /etc/ &&
            echo test
            apk add --no-cache curl"

      - name: install kubectl
        run: |
          docker exec test-docker /bin/sh -c '
            echo install kubectl &&
            echo install kubectl terminer avec succes. &&
            echo renomme le fichier de config kubectl &&
            mkdir -pv /root/.kube/config &&
            echo renomme le fichier de config kubectl terminer avec succes.'

    wireguard:
        runs-on: ubuntu-latest
        if: github.event_name == 'workflow_dispatch'
        env:
          test1: ls
        steps:
        - name: date
          run: date
        - name: date 1
          run: docker -v
        - name: date 1
          run: docker -v
#        - name: Checkout
#          uses: actions/checkout@v4

        - name: test curl
          run: curl https://8.8.8.8

        - name: test variables
          run: echo ${{ env.test1 }}

        - name: test variables
          run: echo $test1

        - name: test variables
          run: ${{ secrets.test1 }} /bin/bash

        - name: test variables
          run: $test /bin/bash

        - name: savoir si openssh-server est installé
          run: which sshd

        - name: sudo systemctl status ssh
          run: sudo systemctl status ssh
        
#        - name: Get Public IP
#          run: curl ifconfig.me

#        - name: connaitre le nom user
#          run: whoami

        - name: setup ssh key
          run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.SSH }}" > ~/.ssh/id_rsa

        - name: setup ssh key 1
          run: |
            chmod 600 ~/.ssh/id_rsa
          
        - name: setup ssh key 2
          run: |
            echo "${{ secrets.IPTUNNELPUB }}" >> ~/.ssh/known_hosts

        - name: test netstat
          run: sudo netstat -tuln 

        - name: test nc
          run: nc -zv ${{ secrets.IPTUNNELPUB }} 22
          
        - name: Create Reverse SSH Tunnel
          run: |
            ssh -R 2222:localhost:22 root@${{ secrets.IPTUNNELPUB }}


        


        - name: sleep 30
          run: sleep 180

        - name: executing remote ssh commands using password
          uses: appleboy/ssh-action@v1.2.0
          with:
            host: ${{ secrets.IPTUNNELPUB }}
            username: user
            script: whoami
            password: ${{ secrets.PASSWORD }}
            proxy_host: ${{ secrets.IPPC }}
            proxy_port: 22
            proxy_username: user
            proxy_password: ${{ secrets.PASSWORD }}

        - name: setup ssh key
          run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.SSH }}" > ~/.ssh/id_rsa

        - name: setup ssh key 1
          run: |
            chmod 600 ~/.ssh/id_rsa
          
        - name: setup ssh key 2
          run: |
            echo "${{ secrets.IPTUNNELPUB }}" >> ~/.ssh/known_hosts

        - name: test avec redirection
          run: ssh -tt -L 22:localhost:22 user@${{ secrets.IPTUNNELPUB }}

        - name: test ssh
          run: sudo ssh -o StrictHostKeyChecking=no user@${{ secrets.IPTUNNELPUB }} "echo 'Connected successfully'"
            
        - name: test ssh
          run: ssh -o StrictHostKeyChecking=no ${{ secrets.user }}@${{ secrets.IPTUNNELPUB }} "echo 'Connected successfully'"



#        - name: installe wireguard
#          run: sudo apt install wireguard -y

#        - name: ip 
#          run: sudo ip addr

#        - name: config wireguard secret
#          run: |
#            umask 077
#            wg genkey > privatekey
#            wg pubkey < privatekey

        - name: slepp 30
          run: sleep 30

        - name: config wireguard reseau suite
          run: |
            sudo ip link add dev wg0 type wireguard 
            sudo ip addr add dev wg0 10.1.1.3/32 
            sudo wg set wg0 private-key ./privatekey 
            sudo wg set wg0 peer ${{ secrets.wpub }} allowed-ips 10.1.1.4/32 endpoint ${{ secrets.IPTUNNELPUB }}:45776

        - name: config wireguard reseau suite fin
          run: |
            sudo ip link set wg0 up

        - name: config wireguard sleep
          run: sleep 5

        - name: test acces wireguard
          run: sudo wg show

        - name: config wireguard reseau suite fin 2
          run: |
            sudo wg set wg0 peer ${{ secrets.wpub }} persistent-keepalive 360

        - name: test acces wireguard
          run: sudo wg show

        - name: config wireguard reseau sleep
          run: |
            sleep 360

        - name: test acces wireguard
          run: curl -Ik http://10.1.1.4

        - name: test acces wireguard
          run: curl -Ik ${{ secrets.IP2 }}

        - name: config wireguard secret
          run: echo "${{ secrets.w }}" > privatekey

        - name: config wireguard
          run: |
            chmod go-r privatekey
          
        - name: config wireguard
          run: |
            ip link add dev wg0 type wireguard
            sudo ip addr add

        - name: test acces wireguard
          run: curl -Ik ${{ secrets.IP2 }}

        - name: tunnel ssh
          run: ssh -R 80:localhost:80 192.168.0.123

        - name: installe tailscale
          run: curl -fsSL https://tailscale.com/install.sh | sh

        - name: config tailscale
          run: tailscale up --login-server https://login.tailscale.com --authkey ${{ secrets.TAILSCALE }} 



        - name: test action
          uses: codetalkio/expose-tunnel@v1.5.0
          id: expose-tunnel
          with:
           service: bore.selfhosted
           port: 6443
           selfHostedEndpoint: ${{ secrets.IPTUNNELPUB }}

        - name: installer bore te
          run: |
           docker run -i --init --rm -p 80:80 -p 7835:7835 ekzhang/bore local --port 80 --to ${{ secrets.IPTUNNELPUB }} 7835
        - name: Log tunnel URL
          run: |
            echo "Tunnel URL:"
            echo "${{ steps.expose-tunnel.outputs.tunnel-url }}"

        - name : creation yaml k3s
          run: sudo echo "${{ secrets.K3SYAML }}" >> k3s.yaml

        - name: ls t
          run: ls 

        - name: kubectl remplace server
          run: |
            sed -i 's|"https://127.0.0.1:6443"|"https://${{ steps.expose-tunnel.outputs.tunnel-url }}"|g' k3s.yaml

        - name: cp k3s.yaml
          run: sudo cp k3s.yaml /home/k3s.yaml

        - name: kubectl get node
          run: export KUBECONFIG=/home/k3s.yaml && kubectl get nodes




#        - name: test curl2
#          run: curl -Ik ${{ secrets.IP2 }}

#        - name: install wireguard
#          run: apt update && apt install wireguard -y

#        - name: config wireguard secret
#          run: echo "${{ secrets.w }}" > privatekey

#        - name: config wireguard 
#          run: |
#            chmod go-r privatekey
            
#        - name: config wireguard 
#          run: |
#            ip link add dev wg0 type wireguard
#            sudo ip addr add 10.1.1.1/32 dev wg0
#            sudo wg set wg0 private-key ./privatekey peer ${{ secrets.wpub }} allowed-ips 10.1.1.0/24 endpoint ${{ secrets.IPPC }}:51820
#            ip link set wg0 up

#        - name: test acces wireguard
#          run: curl -Ik ${{ secrets.IP2 }}

#        - name: install innernet
#          run: apt update && apt install innernet -y

#        - name: config innernet
#          run: |
#            innernet install {{ secrets.wpub }} >> innernet.conf
#            innernet up 
#            innernet sh

#        - name: install headscale
#          run: apt update && apt install headscale -y

#        - name: config headscale
#          run: |
#            headscale init --admin={{ secrets.wpub }} --admin-password={{ secrets.w }} --server={{ secrets.IPPC }}:51820
#            headscale serve
            
#        - name: tar bore
#          run: tar -xvf bore-v0.5.1-x86_64-unknown-linux-musl.tar.gz

#        - name: mv bore+start 
#          run: |
#            mv bore /usr/local/bin
#            ./bore local --port 8080 --to ${{ secrets.IPTUNNEL }}

#        - name: test acces bore
#          run: curl -Ik ${{ secrets.IPTUNNEL }}
          
#        - name: test wget
#          run: wget ${{ secrets.IP2 }} --no-check-certificate

#        - name: install kubectl
#          run: apt update && apt install kubectl -y

#        - name: config kubeconfig
#          run: sudo echo "${{ secrets.KUBECONFIG }}" >> sudo /home/k3s.yaml

#        - name: kubectl get node
#          run: sudo export KUBECONFIG=/home/k3s.yaml && kubectl get node  

#        - name: build
#          run: docker build -t test1 .
#        - name: lance docker
#          run: docker run -it test1 


          


#        - name: cowsay t
#          run: |
#            sudo apt update
#            sudo apt install -y cowsay 

#        - name: cowsay2 
#          run: sudo mv /usr/share/cowsay /apps

#        - name: cowsay
#          run: co
