name: build test 4
on: 
  push:
  workflow_dispatch:

jobs:
  ohello_world_jb1:
    runs-on: ubuntu-latest
    name: A job to say hello
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3.0.2
        id: changes 
        with: 
          filters: | 
            store-front:
              - 'store-front/**'
      - name: docker build
        if: steps.changes.outputs.store-front == 'true'
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/store-front-test store-front
      - run: docker image ls
      - run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - if: steps.changes.outputs.store-front == 'true'
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/store-front-test

  ohello_world_jb2:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.7
      - uses: dorny/paths-filter@v3.0.2
        id: changes 
        with: 
          filters: | 
            product-service:
              - 'product-service/**'
      - name: docker build
        if: steps.changes.outputs.product-service == 'true'
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/product-service-test2 product-service
      - run: docker image ls
      - run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - if: steps.changes.outputs.product-service == 'true'
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-service-test2
  k3s:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.7
      - name: docker k3s
        uses: debianmaster/actions-k3s@v1.0.5
        id: k3s
        with:
          version: 'latest'
      - run: |
          kubectl get nodes
          kubectl get pods -A
          sleep 30
          kubectl get pods -A
      
      - uses: Azure/setup-helm@v4.2.0

      - name: setup kubectl
        uses: Azure/setup-kubectl@v4.0.0
        id: install

      - name: install helm
        uses: Azure/setup-helm@v4
        id: install-helm

      - name: install helm apli monitoring
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm upgrade --install my-kube-prometheus-stack prometheus-community/kube-prometheus-stack --version 57.0.3 -n monitoring --create-namespace --atomic --wait
      
      - name: Setup ArgoCD CLI 
        uses: imajeetyadav/argocd-cli@v1

      - name: Example action
        uses: cloudposse/kubernetes-namespace-builder-composite-action@0.4.0
        id: kubernetes-namespace
        with:
          flavor: custom
          app-name: argocd

      - name: echo output from previous action
        run: echo "Le namespace est ${{ steps.kubernetes-namespace.outputs.kubernetes-namespace }}."  

      - name: Deploys application argocd
        uses: Azure/k8s-deploy@v5.0.0
        with:
          namespace: argocd
          action: deploy
          manifests: https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      - name: attendre argocd
        run: |
          kubectl wait --for=condition=available deployment --all -n argocd
          sleep 60

      - name: load balancing
        run: |
          echo '{"spec": {"type": "LoadBalancer"}}' > patch.json
          kubectl patch svc argocd-server -n argocd --type merge --patch "$(cat patch.json)"
            
      - name: connexion argocd 1er connexion
        env:
          ip: kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
          mdp: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
        run: argocd login $(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')  --username admin --password $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo) --insecure ${{ env.sensible-pas-afficher }}

      - name: update ArgoCD password
        env:
          ARGOCD: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
          mdp: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
          newmdp: ${{ secrets.ARGOCD }}
        run: argocd account update-password --account admin --new-password ${{ secrets.ARGOCD }} --current-password $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo) ${{ env.sensible-pas-afficher }}


      - name: Setup ArgoCD CLI 
        uses: imajeetyadav/argocd-cli@v1

      - name: connexion argocd
        env:
          ip: kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
        run: argocd login ${{ env.ip }} --username admin --password ${{ secrets.ARGOCD }} --insecure ${{ env.sensible-pas-afficher }}

      - name: Create Contoso namespace
        run: |
          kubectl get namespace contoso || kubectl create namespace contoso
        
      - name: Create Application Contoso with Argocd avec namespace
        uses: clowdhaus/argo-cd-action/@v2.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          version: 2.11.3
          command: app
          options: create contoso --repo https://github.com/MelkiBenjamin/deploiement-apli-kubernetes-argocd --path ecommerce --dest-server https://kubernetes.default.svc --dest-namespace contoso --sync-policy automated --auto-prune


