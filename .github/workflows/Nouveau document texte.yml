name: build test
on: [push]

jobs:
  hello_world_job:
    runs-on: ubuntu-latest
    name: A job to say hello
    steps:
      - uses: actions/checkout@v4
      - id: foo
        uses: mudler/localai-github-action@v1
        with:
          model: 'hermes-2-theta-llama-3-8b' # Any from models.localai.io, or from huggingface.com with: "huggingface://<repository>/file"
      - name: Greet
        id: greet
        run: |
                input="Génére moi un code d'une application web microservice de front de site web de magasin de livre en js avec aussi le css qui marche si je l'essaye. ce code a une page d'accueil avec tout les livre pour les mettre aux panier et une page panier qui resume les livre au panier. l'apli est très simple rapide. Repond avec que du code et tout ce code dans le meme fichier"

                # Define the LocalAI API endpoint
                API_URL="http://localhost:8080/chat/completions"

                # Create a JSON payload using jq to handle special characters
                json_payload=$(jq -n --arg input "$input" '{
                model: "'$MODEL_NAME'",
                messages: [
                    {
                    role: "system",
                    content: "You are a friendly companion"
                    },
                    {
                    role: "user",
                    content: $input
                    }
                ]
                }')

                # Send the request to LocalAI
                response=$(curl -s -X POST $API_URL \
                -H "Content-Type: application/json" \
                -d "$json_payload")

                # Extract the result from the response
                result="$(echo $response | jq -r '.choices[0].message.content')"

                # Print the result
                echo "Result:"
                echo "$result" 
                echo "payload sent"
                echo "$json_payload"
                {
                    echo 'message<<EOF'
                    echo "$result"
                    echo EOF
                }
                >> "$GITHUB_OUTPUT"
                # now the output can be consumed with ${{ steps.greet.outputs.message }} by other steps

      - name: test
        run: |
          echo "${{ steps.greet.outputs.message }}" > temp_file
          echo "GITHUB_OUTPUT<<EOF" >> temp_file
          cat temp_file >> test
          echo "EOF" >> test

      - name: test2
        run: ls test
